// Import the necessary traits and types for serializing and deserializing structs and making HTTP requests
use serde::{Serialize, Deserialize};
use serde_derive::{Serialize, Deserialize};
use tokio::io::{self, AsyncReadExt, AsyncWriteExt};
use tokio::net::{TcpListener, TcpStream};
use tokio::prelude::*;
use reqwest::{Client, Response};

// Define a struct for representing a saffron order
#[derive(Serialize, Deserialize, Debug)]
struct SaffronOrder {
    // Number of saffron tokens being redeemed
    x: u64,
    // Mail address provided by the user
    mail_address: String,
    // Ascending 8-digit number generated by gen_order_number
    order_number: u64,
}

// Asynchronously prompt the user for a valid US mail address and return it as a string
async fn ask_mail_address() -> String {
    println!("Please enter a valid US mail address:");
    let mut mail_address = String::new();
    // Read the user's input from stdin
    io::stdin().read_line(&mut mail_address).await.unwrap();
    // Trim leading and trailing whitespace and return the result
    mail_address.trim().to_string()
}

// Asynchronously generate an ascending 8-digit number and return it as a u64
async fn gen_order_number() -> u64 {
    // Declare a static variable to store the current order number
    static mut ORDER_NUMBER: u64 = 0;
    // Increment the order number and return it
    unsafe {
        ORDER_NUMBER += 1;
        ORDER_NUMBER
    }
}

// Asynchronously make an HTTP POST request to the FWS API to redeem saffron tokens
async fn redeem_saffron(x: u64, client: &Client) -> Result<Response, reqwest::Error> {
    // Create an instance of the SaffronOrder struct with the specified number of tokens, the mail address entered by the user, and a unique order number
    let order = SaffronOrder {
        x,
        mail_address: ask_mail_address().await,
        order_number: gen_order_number().await,
    };

    // Set the placeholder AWS credentials and the URL for the FWS API
    let creds = "AWS_CREDS_PLACEHOLDER";
    let url = "https://fws.com/api/redeem_saffron";
    // Make the HTTP POST request with the specified header and JSON body, and return the response
    let res = client.post(url)
        .header("Authorization", creds)
        .json(&order)
        .send()
        .await;
    res
}

// Define the main function for the program
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Create an instance of the reqwest::Client type
    let client = Client::new();

    //
